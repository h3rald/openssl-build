name: Build & Upload

permissions:
  contents: write

# Controls when the action will run.
on:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    release:
        name: "Build and upload artifacts"
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest
                    - windows-latest
        steps:
            # Cancel other actions of the same type that might be already running
            - name: "Cancel similar actions in progress"
              uses: styfle/cancel-workflow-action@0.9.1
              with:
                  access_token: ${{ github.token }}
                  
            # Detects OS and provide Nim-friendly OS identifiers
            - name: Detect current OS
              id: os
              run:  echo "os=${{matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'macosx' || matrix.os == 'windows-latest' && 'windows'}}" >> $GITHUB_OUTPUT

            # Get latest OpenSSL release
            - id: release
              uses: pozetroninc/github-action-get-latest-release@master
              with:
                owner: openssl
                repo: openssl
                token: ${{ secrets.GITHUB_TOKEN }}
                excludes: prerelease, draft

            # Checks out the repository
            - uses: actions/checkout@v4
              with:
                repository: openssl/openssl
                ref: ${{ steps.release.outputs.release }}

            # Installs libraries
            - name: install musl-gcc
              run: sudo apt-get install -y musl-tools
              if: matrix.os == 'ubuntu-latest'
            
            - name: Setup Msys2
              if: matrix.os == 'windows-latest'
              uses: msys2/setup-msys2@v2
              with:
                msystem: MINGW64
                release: true
                update: true
                install: >-
                  base-devel
                  autotools
                  perl
                  mingw-w64-x86_64-perl-locale-maketext
                  mingw-w64-x86_64-toolchain
                  mingw-w64-x86_64-autotools
                  
            - name: Run MSYS2 once
              shell: msys2 {0}
              run: |
                pwd
                echo $MSYSTEM
                echo $MSYS2_PATH_TYPE
                echo $PATH
              if: matrix.os == 'windows-latest'
                   
            # Configure (windows)
            - name: Configure
              shell: msys2 {0}
              run: export PATH=/usr/bin:$PATH && ./Configure mingw64 no-asm no-shared
              if: matrix.os == 'windows-latest'

            # Configure (linux/macos)
            - name: Configure
              shell: bash
              run: ./Configure no-asm no-shared
              if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
            
            # Make (windows)
            - name: Make
              shell: msys2 {0}
              run: export PATH=/usr/bin:$PATH && make
              if: matrix.os == 'windows-latest'

            # Make (linux/macos)
            - name: Make
              shell: bash
              run: make
              if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
            
            # Package the resulting Linux/macOS binary
            - name: Create artifact (Linux, macOS)
              run: zip ${{steps.release.outputs.release}}_${{steps.os.outputs.os}}_x64.zip *.a
              if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
              
            # Package the resulting Windows binary
            - name: Create artifact (Windows)
              run: Compress-Archive -Path *.a -DestinationPath ${{steps.release.outputs.release}}_windows_x64.zip
              if: matrix.os == 'windows-latest'

            # Upload artifacts to current draft release
            - name: "Upload to current release"
              uses: xresloader/upload-to-github-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  file: "openssl*.zip"
                  overwrite: true
                  tag_name: ${{steps.release.outputs.release}}
                  update_latest_release: true
                  verbose: true
